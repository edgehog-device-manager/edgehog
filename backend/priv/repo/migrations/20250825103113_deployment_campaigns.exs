#
# This file is part of Edgehog.
#
# Copyright 2025 SECO Mind Srl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

defmodule Edgehog.Repo.Migrations.DeploymentCampaigns do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:deployment_channels, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :handle, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :tenant_id,
          references(:tenants,
            column: :tenant_id,
            name: "deployment_channels_tenant_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:deployment_channels, [:tenant_id])

    create index(:deployment_channels, [:id, :tenant_id], unique: true)

    alter table(:device_groups) do
      add :deployment_channel_id,
          references(:deployment_channels,
            column: :id,
            name: "device_groups_deployment_channel_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:deployment_campaign, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :status, :text, null: false
      add :outcome, :text
      add :start_timestamp, :utc_datetime_usec
      add :completion_timestamp, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :tenant_id,
          references(:tenants,
            column: :tenant_id,
            name: "deployment_campaign_tenant_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :release_id,
          references(:application_releases,
            column: :id,
            name: "deployment_campaign_release_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :deployment_channel_id,
          references(:deployment_channels,
            column: :id,
            name: "deployment_campaign_deployment_channel_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create index(:deployment_campaign, [:tenant_id])

    create index(:deployment_campaign, [:id, :tenant_id], unique: true)

    create table(:deployment_target, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :retry_count, :bigint, null: false, default: 0
      add :latest_attempt, :utc_datetime_usec
      add :completion_timestamp, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :tenant_id,
          references(:tenants,
            column: :tenant_id,
            name: "deployment_target_tenant_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :deployment_campaign_id,
          references(:deployment_campaign,
            column: :id,
            name: "deployment_target_deployment_campaign_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :device_id,
          references(:devices,
            column: :id,
            name: "deployment_target_device_id_fkey",
            type: :bigint,
            prefix: "public"
          ),
          null: false

      add :deployment_id,
          references(:application_deployments,
            column: :id,
            name: "deployment_target_deployment_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create index(:deployment_target, [:tenant_id])

    create index(:deployment_target, [:id, :tenant_id], unique: true)
  end

  def down do
    drop constraint(:deployment_target, "deployment_target_tenant_id_fkey")

    drop constraint(:deployment_target, "deployment_target_deployment_campaign_id_fkey")

    drop constraint(:deployment_target, "deployment_target_device_id_fkey")

    drop constraint(:deployment_target, "deployment_target_deployment_id_fkey")

    drop_if_exists index(:deployment_target, [:id, :tenant_id])

    drop_if_exists index(:deployment_target, [:tenant_id])

    drop table(:deployment_target)

    drop constraint(:deployment_campaign, "deployment_campaign_tenant_id_fkey")

    drop constraint(:deployment_campaign, "deployment_campaign_release_id_fkey")

    drop constraint(:deployment_campaign, "deployment_campaign_deployment_channel_id_fkey")

    drop_if_exists index(:deployment_campaign, [:id, :tenant_id])

    drop_if_exists index(:deployment_campaign, [:tenant_id])

    drop table(:deployment_campaign)

    drop constraint(:device_groups, "device_groups_deployment_channel_id_fkey")

    alter table(:device_groups) do
      remove :deployment_channel_id
    end

    drop constraint(:deployment_channels, "deployment_channels_tenant_id_fkey")

    drop_if_exists index(:deployment_channels, [:id, :tenant_id])

    drop_if_exists index(:deployment_channels, [:tenant_id])

    drop table(:deployment_channels)
  end
end
