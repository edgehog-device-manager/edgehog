#!/usr/bin/env elixir
#
# This file is part of Edgehog.
#
# Copyright 2021-2024 SECO Mind Srl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

Mix.install([ 
  {:jason, "~> 1.4"},
  {:jose, "~> 1.11"}
])

defmodule JwtGenerator do
  @moduledoc """
  Generate a valid JWT for Edgehog
  """

  @default_claim_payload "*"

  def main(args) do
    options = parse_args(args)

    private_key_pem = File.read!(options[:private_key])
    now = DateTime.utc_now()
    claims = generate_claims(options[:token_type], options[:expiry], now)

    algo =
      cond do
        String.contains?(private_key_pem, "-----BEGIN RSA PRIVATE KEY-----") -> "RS256"
        String.contains?(private_key_pem, "-----BEGIN EC PRIVATE KEY-----") -> "ES256"
        true -> raise "Unsupported private key format"
      end

    jwt = sign_token(claims, private_key_pem, algo)
    IO.puts(jwt)
  end

  defp parse_args(args) do
    {parsed, _, _} =
      OptionParser.parse(args,
        switches: [
          private_key: :string,
          expiry: :integer,
          token_type: :string
        ],
        aliases: [k: :private_key, e: :expiry, t: :token_type]
      )

    parsed_map = Enum.into(parsed, %{})

    cond do
      is_nil(parsed_map[:private_key]) ->
        raise ArgumentError, "Private key is required. Use -k or --private-key to specify the key."

      is_nil(parsed_map[:token_type]) ->
        raise ArgumentError, "Token type is required. Use -t or --token-type to specify 'tenant' or 'admin'."

      true ->
        Map.put_new(parsed_map, :expiry, 86_400)
    end
  end

  defp generate_claims("tenant", expiry, now) do
    claims = %{"iat" => DateTime.to_unix(now), "e_tga" => @default_claim_payload}
    add_expiry(claims, expiry, now)
  end

  defp generate_claims("admin", expiry, now) do
    claims = %{"iat" => DateTime.to_unix(now), "e_ara" => @default_claim_payload}
    add_expiry(claims, expiry, now)
  end

  defp generate_claims(_, _, _) do
    raise ArgumentError, "Invalid token type. Must be 'tenant' or 'admin'."
  end

  defp add_expiry(claims, expiry, now) when expiry > 0 do
    Map.put(claims, "exp", DateTime.to_unix(DateTime.add(now, expiry)))
  end

  defp add_expiry(claims, _, _) do
    claims
  end

  defp sign_token(claims, private_key, algo) do
    jwk = JOSE.JWK.from_pem(private_key)
  
    headers = %{"alg" => algo}

    {_, jwt} = JOSE.JWT.sign(jwk, headers, claims) |> JOSE.JWS.compact()

    jwt
  end
end

JwtGenerator.main(System.argv())
